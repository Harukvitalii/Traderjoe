
import json
import requests

from datetime import timedelta
from datetime import datetime 
from proxies  import proxies

from storage  import my_address
from storage  import ADMIN, BOT_API
from storage  import REPORT_TOKEN
from storage  import contract_marketplace, ABI_marketplace
from traderjoe import web_driver_avax

from pprint   import pp
from dotenv   import load_dotenv
from funcs    import print_floor, list_of_lists_to_one_list
from funcs    import fail_buy_count, success_buy_count

from arequestsHelper          import AREQUEST_MANAGER 
from web3_driver              import WEB3_DRIVER_AVAX



proxy_count = len(proxies)
load_dotenv()


class TraderJoe(AREQUEST_MANAGER): 
    time_sleep       = 1
    
    
    def __init__(self, BOT_API, ADMIN_ID):
        super().__init__(BOT_API, ADMIN_ID)

        self.web3_avax = web_driver_avax
        self.bin_range = 51 #-25 0 25
        
    
    async def main(self,*args): 
        #TO DO 
        # ми маєм мати діапазаон ціни в якому у нас уже бул знаходиться 
        # якщо ми доходимо до однієї із сторін кінця пула, 
        # 1) забераєм весь пул.
        # 2) свапаєм, щоб було дві монети
        # 3) закидаємо знову в пул.
        self.web3_avax.add_liquidity_pool_AVAX(self.bin_range, amountUSDT=500)
        # 4) ставимо новий діапазон 
        
        pass
    
    
    def get_liquidity_position(self,): 
        link = "https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v2"
        data = {"query":"\n  query liquidityPositions(\n    $first: Int! = 1000\n    $user: Bytes!\n    $lbPairAddr: String!\n  ) {\n    liquidityPositions(\n      first: $first\n      where: { lbPair: $lbPairAddr, user: $user, binsCount_gt: 0 }\n    ) {\n      id\n      binsCount\n      userBinLiquidities(first: 1000, where: { liquidity_gt: 0 }) {\n        liquidity\n        binId\n      }\n      user {\n        id\n      }\n      lbPair {\n        ...lbPairFields\n      }\n    }\n  }\n  \n  fragment lbPairFields on LBPair {\n    id\n    name\n    binStep\n    baseFeePct\n    tokenXPrice\n    tokenYPrice\n    tokenX {\n      id\n      symbol\n      decimals\n    }\n    tokenY {\n      id\n      symbol\n      decimals\n    }\n    reserveX\n    reserveY\n    totalValueLockedUSD\n    volumeUSD\n    timestamp\n  }\n\n",
                "variables":{"lbPairAddr":"0xdf3e481a05f58c387af16867e9f5db7f931113c9","user":"0xb13d2e1b6a388e07ac1afebf3b7c1d7c924667e4"},"operationName":"liquidityPositions"}

        json_resp = requests.post(link, json=data)
        resp = json_resp.json()
        print(resp)
        
    async def get_bin_ids(self, *args): 
        link = 'https://barn.traderjoexyz.com/v1/bin/avalanche/0xdF3E481a05F58c387Af16867e9F5dB7f931113c9/8376158?filterBy=1d&radius=100'
        resp = requests.get(link)
        resp = resp.json()
        return resp
    
    
    
    def afura(self, *args): 

        link = "https://avalanche-mainnet.infura.io/v3/6cdd13dd4a2e477fbee3e414554b86d1"
        data = {"method":"eth_call","params":[{"to":"0xdf3e481a05f58c387af16867e9f5db7f931113c9","data":"0xf7cff1f8000000000000000000000000b13d2e1b6a388e07ac1afebf3b7c1d7c924667e40000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000007fcf4600000000000000000000000000000000000000000000000000000000007fcf4700000000000000000000000000000000000000000000000000000000007fcf4800000000000000000000000000000000000000000000000000000000007fcf4900000000000000000000000000000000000000000000000000000000007fcf4a00000000000000000000000000000000000000000000000000000000007fcf4b00000000000000000000000000000000000000000000000000000000007fcf4c00000000000000000000000000000000000000000000000000000000007fcf4d00000000000000000000000000000000000000000000000000000000007fcf4e00000000000000000000000000000000000000000000000000000000007fcf4f00000000000000000000000000000000000000000000000000000000007fcf5000000000000000000000000000000000000000000000000000000000007fcf5100000000000000000000000000000000000000000000000000000000007fcf5200000000000000000000000000000000000000000000000000000000007fcf5300000000000000000000000000000000000000000000000000000000007fcf5400000000000000000000000000000000000000000000000000000000007fcf5500000000000000000000000000000000000000000000000000000000007fcf5600000000000000000000000000000000000000000000000000000000007fcf5700000000000000000000000000000000000000000000000000000000007fcf5800000000000000000000000000000000000000000000000000000000007fcf5900000000000000000000000000000000000000000000000000000000007fcf5a00000000000000000000000000000000000000000000000000000000007fcf5b00000000000000000000000000000000000000000000000000000000007fcf5c00000000000000000000000000000000000000000000000000000000007fcf5d00000000000000000000000000000000000000000000000000000000007fcf5e00000000000000000000000000000000000000000000000000000000007fcf5f00000000000000000000000000000000000000000000000000000000007fcf6000000000000000000000000000000000000000000000000000000000007fcf6100000000000000000000000000000000000000000000000000000000007fcf6200000000000000000000000000000000000000000000000000000000007fcf6300000000000000000000000000000000000000000000000000000000007fcf6400000000000000000000000000000000000000000000000000000000007fcf6500000000000000000000000000000000000000000000000000000000007fcf6600000000000000000000000000000000000000000000000000000000007fcf6700000000000000000000000000000000000000000000000000000000007fcf6800000000000000000000000000000000000000000000000000000000007fcf6900000000000000000000000000000000000000000000000000000000007fcf6a00000000000000000000000000000000000000000000000000000000007fcf6b00000000000000000000000000000000000000000000000000000000007fcf6c00000000000000000000000000000000000000000000000000000000007fcf6d00000000000000000000000000000000000000000000000000000000007fcf6e00000000000000000000000000000000000000000000000000000000007fcf6f00000000000000000000000000000000000000000000000000000000007fcf7000000000000000000000000000000000000000000000000000000000007fcf7100000000000000000000000000000000000000000000000000000000007fcf7200000000000000000000000000000000000000000000000000000000007fcf7300000000000000000000000000000000000000000000000000000000007fcf7400000000000000000000000000000000000000000000000000000000007fcf75"},"latest"],"id":70,"jsonrpc":"2.0"}
        json_resp = requests.post(link, json=data)
        resp = json_resp.json()
        print(resp)
                
            
    
if __name__ == "__main__":
    Pool = TraderJoe(BOT_API, ADMIN)

    Pool.run_function_with_exception(Pool.afura, 'TraderJoe Pool', otladka=1)  
    # amazy.run_function_with_exception(amazy.main, 'AMAZY', otladka=True)  





